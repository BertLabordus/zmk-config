/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define COMBO_TIMEOUT 60

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define DANGER  3

/ {
    macros {
	hello: hello {
            label = "hello";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap_time 10>
		,<&macro_tap &kp H &kp E &kp L &kp L &kp O>
                ;
        };
    };
};


/ {
    combos {
        compatible = "zmk,combos";
 	 combo_del {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <11 12 13>;
            bindings = <&mt RALT DEL>;
        };
	 combo_cw {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <2 3 4>;
            bindings = <&caps_word>;
        };
	 combo_tab {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <10 11 12>;
            bindings = <&mt K_CONTEXT_MENU TAB>;
        };
	 combo_row {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <12 13 14>;
            bindings = <&kp LS(HOME)>;
        };
	 combo_esc {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <0 1 2>;
            bindings = <&kp ESC>;
	 };
	 combo_ctlbksp {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <6 7 8>;
            bindings = <&kp LC(BSPC)>;
        };
	 combo_bksp {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <16 17 18>;
            bindings = <&kp BSPC>;
        };
    };
};

&caps_word {
	continue-list = <UNDERSCORE MINUS BACKSPACE DELETE HOME END LEFT RIGHT>;
};

&kscan0 {
	debounce-period = <20>;
	};

    
#define U_TAPPING_TERM 200
/ {
  behaviors {
    u_mt: u_mt {
      compatible = "zmk,behavior-hold-tap";
      label = "u_mt";
      #binding-cells = <2>;
      tapping_term_ms = <U_TAPPING_TERM>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
    u_lt: u_lt {
      compatible = "zmk,behavior-hold-tap";
      label = "u_lt";
      #binding-cells = <2>;
      tapping_term_ms = <U_TAPPING_TERM>;
      flavor = "tap-preferred";
      bindings = <&mo>, <&kp>;
    };
  };
};

#define U_BASE   0
#define U_EXTRA  1
#define U_TAP    2
#define U_BUTTON 3
#define U_NAV    4
#define U_MOUSE  5
#define U_MEDIA  6
#define U_NUM    7
#define U_SYM    8
#define U_FUN    9

#define U_RDO &kp LC(Y)
#define U_PST &kp LC(V)
#define U_CPY &kp LC(C)
#define U_CUT &kp LC(X)
#define U_UND &kp LC(Z)

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "BASE";
            bindings = <
&kp Q             &kp W         &kp E        	   &kp R            &kp T              		&kp Y            &kp U             &kp I            &kp O           &kp P             
&u_mt LGUI A      &u_mt LALT S  &u_mt LCTRL D      &u_mt LSHFT F    &kp G              		&kp H            &u_mt LSHFT J     &u_mt LCTRL K    &u_mt LALT L    &u_mt LGUI SQT   
&u_lt U_BUTTON Z  &u_mt RALT X  &kp C              &kp V            &kp B              	    &kp N            &kp M             &kp COMMA        &u_mt RALT DOT  &u_lt U_BUTTON SLASH
&none             &none         &u_lt U_MEDIA ESC  &u_lt U_NAV SPC  &u_lt U_MOUSE TAB		&u_lt U_SYM RET  &u_lt U_NUM BSPC  &u_lt U_FUN DEL  &none           &none
            >;
        };
            
        

        button_layer {
            label = "BUTTON";
            bindings = <
U_UND            U_CUT            U_CPY            U_PST            U_RDO            U_RDO            U_PST            U_CPY            U_CUT            U_UND            
&kp LGUI         &kp LALT         &kp LCTRL        &kp LSHFT        U_NU             U_NU             &kp LSHFT        &kp LCTRL        &kp LALT         &kp LGUI         
U_UND            U_CUT            U_CPY            U_PST            U_RDO            U_RDO            U_PST            U_CPY            U_CUT            U_UND            
&none             &none             &none           &none           &none           &none           &none           &none           &none             &none
            >;
        };
    };
};
